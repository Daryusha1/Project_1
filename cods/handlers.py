"""
–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Ä–µ–∞–ª–∏–∑—É–µ—Ç –±–æ—Ç–∞-–Ω–∞–ø–æ–º–∏–Ω–∞—Ç–µ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ aiogram.

–§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ /start –∏ /help –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ç–µ–∫—Å—Ç–∞.
- –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.
- –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:
- reminders: —Å–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á–æ–º —è–≤–ª—è–µ—Ç—Å—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ–º - —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.
"""
import asyncio
#–∏–º–ø–æ—Ä—Ç –≤—Å–µ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∞–∏–æ–≥—Ä–∞–º
from aiogram import F, Router, Bot
from aiogram.types import Message
from aiogram.filters import Command
import datetime
import keyboards

#—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
reminders = {}
router = Router()  #–º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä


@router.message(Command('start'))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    await message.answer('–ü—Ä–∏–≤–µ—Ç! –Ø - –ë–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞—Ç–µ–ª—å. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–æ–º–∞–Ω–¥—É /help, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ.')


@router.message(Command('help'))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞."""
    help_text = (
        "‚úã –ß—Ç–æ —è —É–º–µ—é:\n\n"
        "1. –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ - –ù–∞–∂–∞–≤ –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É, —Ç—ã —Å–º–æ–∂–µ—à—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ç–µ–∫—Å—Ç–∞.\n"
        "2. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è - –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏ —Ç–µ–±–µ –≤—ã—Å–≤–µ—Ç–∏—Ç—Å—è —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–±–æ–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.\n\n"
        "üìù –Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–ø–æ–º–Ω–∏—Ç—å —Ç–µ–±–µ –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö!"
    )

    await message.answer(help_text, reply_markup=keyboards.main)

@router.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')
async def add_reminder(message: Message):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if message.from_user.id not in reminders:
        reminders[message.from_user.id] = []

    reminders[message.from_user.id].append({'waiting_for_datetime': True})
    await message.answer("–ö–æ–≥–¥–∞ —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —è –Ω–∞–ø–æ–º–Ω–∏–ª —Ç–µ–±–µ? (–Ω–∞–ø–∏—à–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD HH:MM')")


@router.message(F.text == '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')
async def view_reminders(message: Message):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    user_id = message.from_user.id
    user_reminders = reminders.get(user_id, [])

    if not user_reminders:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return

    reminders_list = []
    for index, reminder in enumerate(user_reminders):
        if 'reminder_datetime' in reminder:
            reminders_list.append(
                f"{index + 1}. {reminder['reminder_datetime'].strftime('%Y-%m-%d %H:%M')}: {reminder.get('reminder_message', '–ù–µ –∑–∞–¥–∞–Ω–æ')}")

    await message.answer("\n".join(reminders_list))


@router.message()
async def process_input(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
    user_id = message.from_user.id
    if user_id not in reminders:
        reminders[user_id] = []

    #–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    if reminders[user_id] and reminders[user_id][-1].get('waiting_for_datetime'):
        user_datetime = message.text
        try:
            reminder_datetime = datetime.datetime.strptime(user_datetime, '%Y-%m-%d %H:%M')
            reminders[user_id][-1]['reminder_datetime'] = reminder_datetime
            reminders[user_id][-1]['waiting_for_datetime'] = False
            await message.answer("–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —è –Ω–∞–ø–æ–º–Ω–∏–ª —Ç–µ–±–µ?")
        except ValueError:
            await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç 'YYYY-MM-DD HH:MM'.")
            return

    #–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    elif reminders[user_id] and 'reminder_datetime' in reminders[user_id][-1]:
        reminder_message = message.text
        reminders[user_id][-1]['reminder_message'] = reminder_message  #—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

        reminder_datetime = reminders[user_id][-1]['reminder_datetime']
        now = datetime.datetime.now()
        if reminder_datetime < now:
            reminder_datetime += datetime.timedelta(days=1)

        await message.reply(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {reminder_datetime.strftime('%Y-%m-%d %H:%M')}.")

        #–∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        await asyncio.create_task(send_reminder(message.bot, user_id, reminder_datetime, reminder_message))

    else:
        await message.answer("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç—ã –∏–º–µ–µ—à—å –≤ –≤–∏–¥—É.")


async def send_reminder(bot: Bot, user_id: int, reminder_datetime: datetime.datetime, reminder_message: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è."""
    await asyncio.sleep((reminder_datetime - datetime.datetime.now()).total_seconds())

    if user_id in reminders and reminders[user_id]:
        await bot.send_message(user_id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder_message}")

